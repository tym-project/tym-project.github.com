<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: kernel 2.6 | Tym-Project]]></title>
  <link href="http://blog.tym-project.fr/blog/categories/kernel-2-6/atom.xml" rel="self"/>
  <link href="http://blog.tym-project.fr/"/>
  <updated>2014-06-22T16:21:03+00:00</updated>
  <id>http://blog.tym-project.fr/</id>
  <author>
    <name><![CDATA[Tym]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Installer Vmware Server 2 sur un Kimsufi 250 (Ovh)]]></title>
    <link href="http://blog.tym-project.fr/2010/06/30/installer-vmware-server-2-sur-un-kimsufi-250-ovh/"/>
    <updated>2010-06-30T12:05:49+00:00</updated>
    <id>http://blog.tym-project.fr/2010/06/30/installer-vmware-server-2-sur-un-kimsufi-250-ovh</id>
    <content type="html"><![CDATA[<p>J'ai très récemment eu à installer Vmware Server
version 2 sur un serveur dédié Kimsufi de Ovh. Plus précisément sur une
Unbuntu 9.04. Facile ? Non ! Faisable ? Oui...</p>

<!-- more -->


<p>Mon souci principal à été de
devoir me battre avec un script d'installation vieillissant, inadapté à
l'architecture des noyaux récents. Je commence par installer un ensemble de
paquets de base :</p>

<pre><code>apt-get update &amp;&amp;  apt-get install build-essential ncurses-dev xinetd
</code></pre>

<h2>"Le matin je compile un noyau, ça me décrasse le processeur !"</h2>

<p>Ces paquets vont me servir à recompiler le noyau du serveur...et oui car les
noyaux de Ovh ne sont par défaut pas modulaires. Avec <code>uname -r</code> je peux
déterminer la version de mon noyau actuel. Avec cette information j'ai pu
télécharger la configuration Ovh correspondante :</p>

<pre><code>wget ftp://ftp.ovh.net/made-in-ovh/bzImage/2.6-config-xxxx-std-ipv4-64
</code></pre>

<p>Hop hop, je récupère la dernière version du kernel 2.6 :</p>

<pre><code>wget http://www.kernel.org/pub/linux/kernel/v2.6/linux-2.6.33.5.tar.bz2
</code></pre>

<p>Et me voila partit dans une recompilation "classique" (sans utiliser de <code>.deb</code>
par exemple) :
{% codeblock lang:bash %}
cd /usr/src</p>

<p>tar xvf /root/linux-2.6.33.5.tar.bz2</p>

<h1>je crée un lien symbolique pour respecter les règles de compilation d'un noyau</h1>

<p>ln -s linux-2.6.33.5/ linux
cd linux</p>

<h1>un peu de nettoyage...</h1>

<p>make clean &amp;&amp; make mrproper</p>

<p>cp /root/2.6-config-xxxx-std-ipv4-64 ./.config
{% endcodeblock %}</p>

<p>Un <code>make menuconfig</code> me permet d'accéder au menu de configuration du noyau :</p>

<p>{% img http://pics.tym-project.fr.s3-website-eu-west-1.amazonaws.com/2010-2/16-06-2010-14-04-52.png %}</p>

<p>La première chose
à faire est de modifier le nom de votre noyau</p>

<p>{% img http://pics.tym-project.fr.s3-website-eu-west-1.amazonaws.com/2010-2/16-06-2010-14-06-18.png %}
{% img http://pics.tym-project.fr.s3-website-eu-west-1.amazonaws.com/2010-2/16-06-2010-14-06-40.png %}</p>

<p>Très important, activez la gestion des modules avec les
options suivantes :</p>

<p>{% img http://pics.tym-project.fr.s3-website-eu-west-1.amazonaws.com/2010-2/16-06-2010-14-07-07.png %}
{% img http://pics.tym-project.fr.s3-website-eu-west-1.amazonaws.com/2010-2/16-06-2010-14-07-57.png %}</p>

<p>Vous
pouvez bien entendu apporter des modifications supplémentaires à la
configurations, mais j'ai tendance à le déconseiller pour un premier essai :)
Une fois votre <code>.config</code> sauvegardé vous pouvez lancer la compilation :</p>

<pre><code>make
</code></pre>

<p>Patience patience, cela
peut durer un certain temps ! Copiez ensuite l'image du noyau dans <code>/boot</code>,
pensez bien à la renommer :</p>

<pre><code>cp arch/x86_64/boot/bzImage /boot/bzImage-`uname -r`-mod
</code></pre>

<p>Modifiez la
configuration de <code>[man]lilo[/man]</code> (<code>/etc/lilo.conf</code>) pour prendre en compte votre nouvelle image
:</p>

<pre><code>image=/boot/bzImage-2.6.33.5-grsec-xxxx-grs-ipv4-64-mod
</code></pre>

<p>Mettez à
jour le boot-loader...et croisez les doigts pour le reboot :</p>

<pre><code>/sbin/lilo reboot
</code></pre>

<h2>Et c'est partit pour une installation bien (trop) compliquée...</h2>

<p>Votre serveur fonctionnant sur son beau noyau tout neuf, installez les headers
du noyau en cours en lancez l'installation de Vmware Server : <em>Attention,
n'installez pas les modules tout de suite !</em>
{% codeblock lang:bash %}
cd /usr/src/linux</p>

<p>make headers_install</p>

<p>tar xzvf VMware-server-2.0.2-203138.x86_64.tar.gz</p>

<p>cd vmware-server-distrib</p>

<p>mkdir /lib/modules/<code>uname -r</code></p>

<p>./vmware-install.pl</p>

<p>Before running VMware Server for the first time, you need to configure it by
invoking the following command: "/usr/bin/vmware-config.pl".
Do you want this program to invoke the command for you now? [yes] no
{% endcodeblock %}
Vous allez maintenant devoir patcher les modules avant de les compiler. J'ai
eu pas mal de soucis, et rassemblé les résultats dans le script qui suit. Elle est
pas belle la vie ?
{% codeblock lang:bash %}</p>

<h1>!/bin/bash</h1>

<p>cd /tmp</p>

<p>wget http://www.tym-project.fr/blog/wp-content/uploads/2010/06/vmnet.tar
wget http://www.tym-project.fr/blog/wp-content/uploads/2010/06/vmci.tar
wget http://www.tym-project.fr/blog/wp-content/uploads/2010/06/vsock.tar
wget http://www.tym-project.fr/blog/wp-content/uploads/2010/06/vmmon.tar</p>

<p>for i in vmnet.tar vmci.tar vsock.tar vmmon.tar; do</p>

<pre><code>mv -vf $i
/usr/lib/vmware/modules/source
</code></pre>

<p>done</p>

<p>tar xvf /usr/lib/vmware/modules/source/vmnet.tar -C /tmp
tar xvf/usr/lib/vmware/modules/source/vmci.tar -C /tmp</p>

<p>perl -pi -e 's,("vnetInt.h"),\1\n#include "compat_sched.h",' vmnet-only/vnetUserListener.c
perl -pi -e 's,("compat_page.h"),\1\n#include "compat_sched.h",' vmci-only/include/pgtbl.h</p>

<p>tar cvf /usr/lib/vmware/modules/source/vmnet.tar vmnet-only tar cvf
/usr/lib/vmware/modules/source/vmci.tar vmci-only</p>

<h1>Des petites manipulations pour adapter l'architecture du noyau à quelque</h1>

<p>chose de compréhensible par l'installer...
cat /usr/src/linux/include/generated/utsrelease.h >> /usr/src/linux/include/linux/version.h
ln -s /usr/src/linux/include/generated/autoconf.h /usr/src/linux/include/linux/</p>

<p>vmware-config.pl
{% endcodeblock %}</p>

<h2>Ayé, c'est installé !</h2>

<p>Pour la postérité j'ai hébergé les différents modules patchés sur ce blog :
<a href="http://www.tym-project.fr/blog/wp-content/uploads/2010/06/vmnet.tar">vmnet.tar</a>, <a href="http://www.tym-project.fr/blog/wp-content/uploads/2010/06/vmmon.tar">vmmon.tar</a>, <a href="http://www.tym-project.fr/blog/wp-content/uploads/2010/06/vmci.tar">vmci.tar</a> et <a href="http://www.tym-project.fr/blog/wp-content/uploads/2010/06/vsock.tar">vsock.tar</a>.</p>

<p>Après cela votre Vmware Server 2 est censé fonctionner correctement. Pour ma
part j'ai un avis très mitigé sur la question : instabilités de l'interface
web, réseaux virtuels très lents...mais je ne peux pas dire si cela vient de
l'installation ou du serveur lui même.</p>

<p>Sources :</p>

<ul>
<li>Compiling VMWare 2.x modules on recent 2.6 kernels</li>
<li>VMware Server 2.0.2 Update Patch #2</li>
<li><a href="http://www.infos-du-net.com/forum/263428-10-tuto-compiler-kernel-ubuntu">[Tuto] Compiler son Kernel sous Ubuntu !</a></li>
<li><a href="http://ubuntuforums.org/showthread.php?t=766676">Compiling vmware server 1.04/1.05 vmmon module errors on 8.04 64bit</a></li>
<li><a href="http://radu.cotescu.com/2009/10/28/how-to-install-vmware-server-2-0-2-on-ubuntu-9-04-jaunty-jackalope/">How to install VMware Server 2.0.2 on Ubuntu 9.04 Jaunty Jackalope</a></li>
</ul>


<p>Bon courage ;-)</p>
]]></content>
  </entry>
  
</feed>
