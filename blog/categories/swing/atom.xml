<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Swing | ツ Tym-Project]]></title>
  <link href="http://TymProject.github.com/tymproject/blog/categories/swing/atom.xml" rel="self"/>
  <link href="http://TymProject.github.com/tymproject/"/>
  <updated>2012-09-16T15:54:08+00:00</updated>
  <id>http://TymProject.github.com/tymproject/</id>
  <author>
    <name><![CDATA[Tym]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Effet de Fade-in/Fade-out (fondu) en Java]]></title>
    <link href="http://TymProject.github.com/tymproject/2009/03/24/effet-de-fade-infade-out-fondu-en-java/"/>
    <updated>2009-03-24T23:32:04+00:00</updated>
    <id>http://TymProject.github.com/tymproject/2009/03/24/effet-de-fade-infade-out-fondu-en-java</id>
    <content type="html"><![CDATA[<p>Le Fondu c'est hype, c'est un fait ! Cela dit comment faire ce genre de choses
en Java/Swing ?</p>

<!-- more -->


<p>Le moyen le plus simple que j'ai trouvé (il-y-en a surement d'autres) c'est
d'utiliser <code>AWTUtilities</code> (pour gérer la transparence) et un Timer (pour gérer
la disparition graduelle).</p>

<p>Prenons pour exemple d'un JDialog que l'on va estomper jusqu'à sa disparition
complète. C'est la définition du SlashScreen.</p>

<p>Java est orienté objet, autant en profiter et créer une classe dédiée au fade-
out :
{% codeblock lang:java %}
import java.util.TimerTask;
import javax.swing.JDialog;
import com.sun.awt.AWTUtilities;</p>

<p>public class Fader extends TimerTask {</p>

<pre><code>private JDialog jDialog;

public Fader(JDialog jDialog) { this.jDialog = jDialog; }
//Comme Fader étend de Timer, c'est la méthode run() qui permet de faire le traitement

@Override public void run() {
    //On décide de réduire l'opacité du JDialog par 0,01f (car c'est du float)
    //Bien entendu si l'opacité est réduite au maximum, on ferme le JDialog avec dispose()
    if(AWTUtilities.getWindowOpacity(jDialog) &gt; 0.01f){
        AWTUtilities.setWindowOpacity(jDialog,AWTUtilities.getWindowOpacity(jDialog)-0.01f);
    } else { jDialog.dispose(); }
 }
</code></pre>

<p>}
{% endcodeblock %}
Et la classe qui contient notre JDialog à faire disparaître :
{% codeblock lang:java %}
import java.awt.Font;
import java.awt.GridLayout;
import java.util.Timer;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;</p>

<p>public class Splash extends JDialog {</p>

<pre><code>public Splash() {
    //On place le JDialog au centre de l'écran
    setLocationRelativeTo(null);

    //On désactive la barre de titre setUndecorated(true);

    //On est organisés alors on place tout les les éléments voulus dans un panel
    //On choisit un GridLayout de 1 ligne sur 1 colonne, on se complique pas pour l'exemple !
    JPanel main = new JPanel(new GridLayout(1, 1));
    JLabel label = new JLabel("Hello Kitty !");

    //On écrit GROS, pour que ça se voit de loin !
    label.setFont(new Font("Arial",Font.BOLD, 20));

    this.add(main);
    main.add(label);
    this.setVisible(true);
    pack();

    //On crée notre Timer Timer timer = new Timer();

    //Et on lance le fade-out, on attend 500 ms avant de commencer à estomper
    //Puis on estompe un peu plus toutes les 5ms
    timer.schedule(new Fader(this),500, 5);
}
</code></pre>

<p>}
{% endcodeblock %}
Pour tester ce code vous pouvez
utiliser un appel de ce style :</p>

<pre><code>new Splash();
</code></pre>

<p>Bon swing ;-)</p>
]]></content>
  </entry>
  
</feed>
