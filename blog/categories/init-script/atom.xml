<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: init script | ツ Tym-Project]]></title>
  <link href="http://TymProject.github.com/tymproject/blog/categories/init-script/atom.xml" rel="self"/>
  <link href="http://TymProject.github.com/tymproject/"/>
  <updated>2012-09-16T15:54:08+00:00</updated>
  <id>http://TymProject.github.com/tymproject/</id>
  <author>
    <name><![CDATA[Tym]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mon script de configuration iptables]]></title>
    <link href="http://TymProject.github.com/tymproject/2011/04/06/iptables-et-lancement-automatique/"/>
    <updated>2011-04-06T12:00:02+00:00</updated>
    <id>http://TymProject.github.com/tymproject/2011/04/06/iptables-et-lancement-automatique</id>
    <content type="html"><![CDATA[<p>Pour ceux qui ne connaitraient pas, iptables est une
interface de gestion du module netfilter du noyau Linux. En termes clairs :
c'est un pare-feu. Iptables est donc un ensemble de commandes permettant de
créer des règles, je ne vais pas rentrer dans les détails, vous trouverez plus
d'infos sur <a href="http://www.techrepublic.com/blog/10things/10-iptables-rules-to-help-secure-your-linux-box/539">cette page par exemple</a>. Dans cet article il sera question de
comment je gère ma configuration de pare-feu à travers un script d'init.</p>

<!-- more -->


<h2>init.d, t'es initié ?</h2>

<p>Le but de ce script est qu'il se lance au démarrage de mon poste, et en bonus
que je puisse couper/relancer mon pare-feu à loisir : c'est là le rôle d'un
script "init.d". Commençons donc par la fin, avec les différents arguments que
peut prendre le script :
{% codeblock lang:bash %}
case $1 in</p>

<pre><code>start)
    start
    ;;
stop)
    stop
    ;;
restart)
    restart
    ;;
*)
    echo "usage: iptables {start|stop|restart}"
    exit 1
    ;;
</code></pre>

<p>esac
{% endcodeblock %}</p>

<p>Logiquement on retrouve les
fonction <code>start</code>, <code>stop</code> et <code>restart</code> avec une explication des arguments pour
toute valeur en dehors de ce choix.</p>

<h2>En fonction des fonctions...</h2>

<p>la fonction <code>restart</code> est très simple :</p>

<pre><code>function restart {
    stop start
}
</code></pre>

<p>la fonction <code>stop</code> est un peu plus complexe et est chargée de vider les règles
iptable, de changer la politique par défaut et de restarter
<code>[man]fail2ban[/man]</code> si besoin :
{% codeblock lang:bash %}
function stop {</p>

<pre><code>for IPTABLES in iptables ip6tables;do
    $IPTABLES -P INPUT ACCEPT
    $IPTABLES -P FORWARD ACCEPT
    $IPTABLES -P OUTPUT ACCEPT
    $IPTABLES -F $IPTABLES -X
done

if [ -e /etc/init.d/fail2ban ]; then
    /etc/init.d/fail2ban restart
fi
</code></pre>

<p>}
{% endcodeblock %}
L'utilisation de <code>for IPTABLES in iptables ip6tables</code> permet de configurer à
la fois pour ipv4 et ipv6.</p>

<p>La fonction <code>start</code> utilise une variable <code>$TCP_PORTS</code> (qui contient les port
TCP à ouvrir) définie ainsi :</p>

<pre><code>TCP_PORTS="80 443"
</code></pre>

<p>Et la fonction en elle-même :
{% codeblock lang:bash %}
function start {</p>

<pre><code>for IPTABLES in iptables ip6tables;do
    $IPTABLES -F $IPTABLES -P INPUT DROP
    $IPTABLES -P FORWARD DROP
    $IPTABLES -P OUTPUT DROP

    $IPTABLES -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
    for port in $TCP_PORTS;do
        $IPTABLES -A INPUT -p tcp --dport $port -j ACCEPT
    done

    $IPTABLES -A OUTPUT -m state --state NEW,RELATED,ESTABLISHED -j ACCEPT
    $IPTABLES -A INPUT -i lo -j ACCEPT $IPTABLES -A OUTPUT -o lo -j ACCEPT
    # ICMP (Ping)
    #$IPTABLES -A INPUT -p icmp -j ACCEPT
done
</code></pre>

<p>if [ -e /etc/init.d/fail2ban ];then</p>

<pre><code>/etc/init.d/fail2ban restart
</code></pre>

<p>fi
}
{% endcodeblock %}</p>

<h2>Configuration et installation</h2>

<p>Pour placer le script dans <code>/etc/init.d/</code> deux solutions sont possibles :</p>

<ul>
<li>le copier dans le répertoire</li>
<li>faire un lien symbolique avec <code>ln -s /emplacement/script/iptables /etc/init.d/iptables</code></li>
</ul>


<p>Si vous mettez ce script en place sur serveur sans accès physique, je vous
conseille formetment de le tester avant de le mettre au démarrage de la
machine...c'est trop bête de se faire enfermer dehors :)</p>

<p>La mise en place du scritpt au démarrage peut se faire manuellement en mettant
en place des liens symboliques dans <code>/etc/rc*.d/</code>, mais il est plus simple de
passer par <code>update-rc.d</code> :</p>

<pre><code>sudo update-rc.d iptables defaults
update-rc.d: warning: /etc/init.d/iptables missing LSB information
update-rc.d: see &lt;http://wiki.debian.org/LSBInitScripts&gt;
</code></pre>

<p>Suite aux erreurs du <code>LSB</code> j'ai ajouté cela au début du script :</p>

<pre><code>### BEGIN INIT INFO
# Provides: iptables
# Required-Start: $local_fs $remote_fs $network $syslog
# Required-Stop: $local_fs $remote_fs $network $syslog
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: Set up iptables at boot time
# Description: Enable service provided by iptables.
### END INIT INFO
</code></pre>

<p>Voici donc le fichier dans son intégralité :
{% codeblock lang:bash %}</p>

<h1>!/bin/bash</h1>

<h1>iptables-default</h1>

<h1>www.tym-project.fr/blog</h1>

<h1>tym@tym-project.fr</h1>

<h3>BEGIN INIT INFO</h3>

<h1>Provides:          iptables</h1>

<h1>Required-Start:    $local_fs $remote_fs $network $syslog</h1>

<h1>Required-Stop:     $local_fs $remote_fs $network $syslog</h1>

<h1>Default-Start:     2 3 4 5</h1>

<h1>Default-Stop:      0 1 6</h1>

<h1>Short-Description: Set up iptables at boot time</h1>

<h1>Description:       Enable service provided by iptables.</h1>

<h3>END INIT INFO</h3>

<p>PATH="/sbin"
TCP_PORTS="80 443"
function stop {</p>

<pre><code>for IPTABLES in iptables ip6tables;do
    $IPTABLES -P INPUT ACCEPT
    $IPTABLES -P FORWARD ACCEPT
    $IPTABLES -P OUTPUT ACCEPT
    $IPTABLES -F
    $IPTABLES -X
done
if [ -e /etc/init.d/fail2ban ]; then
    /etc/init.d/fail2ban restart
fi
</code></pre>

<p>}
function start {</p>

<pre><code>for IPTABLES in iptables ip6tables;do
    $IPTABLES -F
    $IPTABLES -P INPUT DROP
    $IPTABLES -P FORWARD DROP
    $IPTABLES -P OUTPUT DROP
    $IPTABLES -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
for port in $TCP_PORTS;do
    $IPTABLES -A INPUT -p tcp --dport $port -j ACCEPT
done
$IPTABLES -A OUTPUT -m state --state NEW,RELATED,ESTABLISHED -j ACCEPT
$IPTABLES -A INPUT -i lo -j ACCEPT
$IPTABLES -A OUTPUT -o lo -j ACCEPT
# ICMP (Ping)
#$IPTABLES -A INPUT -p icmp -j ACCEPT
done
if [ -e /etc/init.d/fail2ban ];then
    /etc/init.d/fail2ban restart
fi
</code></pre>

<p>}
function restart {</p>

<pre><code>stop
start
</code></pre>

<p>}
case $1 in</p>

<pre><code>start)
start
;;
stop)
stop
;;
restart)
restart
;;
*)
echo "usage: iptables {start|stop|restart}"
exit 1
;;
</code></pre>

<p>esac
{% endcodeblock %}
Bon firewalling ;-)</p>
]]></content>
  </entry>
  
</feed>
