<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: certificat | ツ Tym-Project]]></title>
  <link href="http://tym-project.github.com/blog/categories/certificat/atom.xml" rel="self"/>
  <link href="http://tym-project.github.com/"/>
  <updated>2012-09-16T16:20:48+00:00</updated>
  <id>http://tym-project.github.com/</id>
  <author>
    <name><![CDATA[Tym]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Signer une application Java]]></title>
    <link href="http://tym-project.github.com/2009/04/03/signer-une-application-java-2/"/>
    <updated>2009-04-03T15:41:24+00:00</updated>
    <id>http://tym-project.github.com/2009/04/03/signer-une-application-java-2</id>
    <content type="html"><![CDATA[<p>Pourquoi est-ce important de signer (avec un certificat) une application Java
? Prenons un exemple concret : laisseriez vous entrer une personne non
certifiée dans votre appartement pour qu'elle fouille vos placards ? Non je
l'espère, par contre un policier avec un mandat... là oui (je ne vous le
souhaite pas :)).<br/>
Pour les applications c'est la même chose : votre applet ne
pourra pas accéder à des fichiers sensibles si il n'est pas signé.</p>

<p>Pour ce tutoriel nous allons signer un lecteur Ogg : Cortado. Cet applet est
destiné à être placé sur un serveur web pour diffuser une web-tv par exemple.
Dans l'exemple il doit se connecter à un serveur Icecast et il doit donc être
signé pour avoir le droit de lire le flux.</p>

<p>Vous devez tout d'abord installer le JDK, disponible<a href="http://java.sun.com/javase/downloads/index.jsp"> ici</a>.</p>

<p><em>Je vais vous présenter les manipulations sous Windows, mais elles sont
identiques sous Linux ou Mac.</em></p>

<p>Placez vous dans le dossier du JDK, dans le répertoire des binaires :</p>

<pre><code>cd "C:\Program Files\Java\jdk1.6.0_12\bin"
</code></pre>

<p>Nous allons
tout d'abord créer un certificat. Pour cela utilisez <code>keytool</code>, notre
certificat sera valide 1 an (365 jours) et aura pour alias (un nom pour le
réutiliser lors d'une signature) "myCertif". On précise aussi le mot de passe
du <code>keystore</code> (le coffre qui contient les clés) :</p>

<pre><code>C:\Program Files\Java\jdk1.6.0_12\bin &gt; keytool.exe -genkey -alias myCertif -validity 365 -storepass adadad
</code></pre>

<p>Vous devez alors donner différentes
informations comme le nom de l'entreprise, etc...Attention car ces valeurs
pourront être visibles des utilisateurs ! Vous devrez confirmez les
informations puis donner un mot de passe à la clé. Votre certificat est crée,
signons donc notre application avec <code>jarsigner</code> :</p>

<pre><code>C:\Program Files\Java\jdk1.6.0_12\bin &gt; jarsigner.exe -storepass adadad C:\cortado-ovt-stripped-0.2.2.jar myCertif
</code></pre>

<p>Jarsigner n'est pas très
bavard, mais si rien n'est précisé alors tout s'est bien passé !</p>

<p>Bonnes signatures ;-)</p>
]]></content>
  </entry>
  
</feed>
