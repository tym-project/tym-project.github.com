<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ifs | Tym-Project]]></title>
  <link href="http://blog.tym-project.fr/blog/categories/ifs/atom.xml" rel="self"/>
  <link href="http://blog.tym-project.fr/"/>
  <updated>2014-06-22T16:21:03+00:00</updated>
  <id>http://blog.tym-project.fr/</id>
  <author>
    <name><![CDATA[Tym]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Comment lire un fichier formatté sous Linux]]></title>
    <link href="http://blog.tym-project.fr/2009/04/11/comment-lire-un-fichier-formatte-sous-linux-2/"/>
    <updated>2009-04-11T09:28:33+00:00</updated>
    <id>http://blog.tym-project.fr/2009/04/11/comment-lire-un-fichier-formatte-sous-linux-2</id>
    <content type="html"><![CDATA[<p>Imaginons que vous ayiez un fichier <code>names</code> sous la forme suivante :</p>

<pre><code>Thomas:Tym Kitty:Hello Kitty
</code></pre>

<p>Vous voulez afficher à
l'écran <code>Votre nom est XXXX, vous avez YYYY comme pseudo !</code>. Rien de plus
simple grâce à <code>IFS</code> (dans un script) :
{% codeblock lang:bash %}
while IFS=: read NAME NICKNAME do</p>

<pre><code>echo "Votre nom est $NAME, vous avez $NICKNAME comme pseudo !"
</code></pre>

<p>done &lt; $FILE
{% endcodeblock %}
Cela mérite quelques
explications ! Le <code>while</code> permet de parcourir tout le fichier (sinon on ne
lirait qu'une seule ligne), <code>IFS=[séparateur]</code>(ici "<code>:</code>", donc <code>IFS=:</code>) puis
le nom des variables à assigner aux champs.</p>

<p>Bon bash ;-)</p>
]]></content>
  </entry>
  
</feed>
